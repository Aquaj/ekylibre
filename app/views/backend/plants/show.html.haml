- main_toolbar do |t|
  = t.edit resource
  -# t.destroy
  -#= t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name}, tool: 'new-issue')
  -#= t.new(params: {controller: :inspections, product_id: resource.id}, tool: 'eyedropper')

= main_informations attachment: true do
  = render 'picture'
  = infos do
    = product_info(:work_number, important: true)
    = product_info(:net_surface_area, important: true) do |population|
      = resource.net_surface_area.round(3).l
    = product_info(:variety, important: true, nomenclature: true)
    = product_info(:born_at, important: true)
    - if resource.dead_at
      = product_info(:dead_at, important: true)
    - if resource.born_at && resource.age >= 1.day
      = product_info(:age) do |age|
        %i.picto{class: "picto-clock-o"}
        = human_age(resource.born_at, display: 2)
    -# stock = resource.inspections.reorder(:sampled_at).last.product_stock_in_ground
    -# if resource.inspections.any? && stock
      .med-info
        %span.title= Product.human_attribute_name(:product_stock_in_ground)
        %span.value
          %i.picto{class: "picto-grain"}
          = stock.round(3).l
      - if resource.population && resource.population.to_d != 0.0
        .med-info
          %span.title= Product.human_attribute_name(:provisionnal_yield)
          %span.value
            %i.picto{class: "picto-grain"}
            - unit = stock.unit + "_per_" + resource.net_surface_area.unit
            = (stock.to_d / resource.population).in(unit).round(3).l
    - if resource.trackings.any?
      - resource.trackings.each do |tracking|
        .med-info
          %span.title= Tracking.human_attribute_name(:serial)
          %span.value
            %i.picto{class: "picto-barcode"}
            = link_to(tracking.serial, controller: :trackings, action: :show, id: tracking.id)
    = product_info(:status, important: true) do |status|
      = lights(status)
    .med-info
      %span.title= :ready_to_harvest.tl
      %span.value
        %i.picto{class: "picto-#{resource.ready_to_harvest? ? :done : :clear}"}
    = product_info :description
    = product_info :container do |container|
      %i.picto{class: "zone"}
      = link_to(container.work_name, {controller: container.type.tableize, action: :show, id: container.id})
    - if resource.customized?
      = attributes_list(stamps: false)
  = labels_info(resource.labels)
= cobbles do |c|

  - if resource.intervention_product_parameters.any?
    - c.cobble(:intervention_product_parameters, title: :x_interventions.tl(count: resource.interventions.count)) do
      = cobble_list(:intervention_product_parameters)

  - c.cobble(:issues, title: :x_issues.tl(count: resource.issues.count)) do
    = cobble_toolbar do |t|
      = t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name})
    = cobble_list(:issues)

  - if resource.inspections.any?
    -# TODO: Refactor this _again_ it's still clunky.
    - inspections = resource.inspections.reorder(:sampled_at)
    - categories = inspections.map(&:position)
    - last_inspection = inspections.reorder(:sampled_at).last
    - activity = last_inspection.activity

    - dimension = activity.unit_preference(current_user)
    - symbol_measure = Nomen::Unit.find(last_inspection.user_quantity_unit(dimension)).symbol


    - series_disease = resource.disease_deformity_series(dimension)
    - series_disease = series_disease.map { |cat, data| { name: cat.l, data: data.map { |d| [cat.l, d] } } }

    - c.cobble(:stock_in_ground_by_calibration) do
      = render 'backend/inspections/unit_selector', activity: activity
      - activity.inspection_calibration_scales.each do |scale|
        - if scale.natures.any? { |n| n.inspection_calibrations.any? }
        - series = resource.stock_in_ground_by_calibration_series(dimension, scale.natures.reorder(:minimal_value)).map { |name, data| { name: name, data: data.map { |d| [name, d] } } }
          = column_highcharts(series, y_axis: {reversed_stacks: false, title: {text: InspectionCalibration.human_attribute_name(dimension)}, stack_labels: {enabled: true}}, x_axis: { categories: categories }, legend: true, tooltip: {point_format: "{point.y: 1f} #{symbol_measure}"}, plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})

    - if activity.inspection_point_natures.any? && inspections.any? { |i| i.points_percentage(dimension).nonzero? }
      - c.cobble(:disease_deformity_percentage) do
        = render 'backend/inspections/unit_selector', activity: activity
        = column_highcharts(series_disease, y_axis: {reversed_stacks: false, title: {text: "%"}, stack_labels: {enabled: true}}, x_axis: { categories: categories }, legend: true, tooltip: {point_format: "{point.y: 1f} %"},plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})

    - if last_inspection.marketable_quantity(dimension).to_f.nonzero?
      - c.cobble(:percentage_by_calibration) do
        = render 'backend/inspections/unit_selector', activity: activity
        - pies = last_inspection.scales.map do |scale|
          - if last_inspection.calibrations.of_scale(scale).any? { |c| c.marketable_quantity(dimension).to_d.nonzero? }
            - render "backend/inspections/percentage_chart", dataset: last_inspection.calibrations.of_scale(scale).reorder(:id), scale: scale, dimension: dimension, symbol_measure: symbol_measure
        .chart-table
          - pies.compact.each_slice(3) do |slice_of_pie|
            .chart-line
              - slice_of_pie.each do |chart|
                = chart

  - c.cobble(:inspections, title: :x_inspections.tl(count: resource.inspections.count)) do
    -# FIXME Add activity in URL to get link working
    -# = cobble_toolbar do |t|
      = t.new(params: { controller: :inspections, product_id: resource.id })
    = cobble_list(:inspections)

  =# render partial: 'backend/shared/distributions', locals: {c: c}
